@startuml
class Term{
    // Term表示一个单词，是搜索时的最小单位
    // 由两部分构成:
    // 1. 单词的文本表示
    // 2. 所在字段的名称
    ---
    +String field()
    +String text()
    +BytesRef bytes()
}

abstract class Terms{
    // 访问一个字段中的所有Term
    ---
    // 返回一个迭代器，用来遍历所有的Term
    +{abstract} TermsEnum iterator()
    +TermsEnum intersect(CompiledAutomaton compiled, final BytesRef startTerm)
    // 该Field中Term总数
    +{abstract} long size()
    --- 所有Term的totalTermFreq之和
    +{abstract} long getSumTotalTermFreq()
    // 所有Term的docFreq之和
    +{abstract} long getSumDocFreq()
    // 在这个Field至少包含一个Term的文档总数
    +{abstract} int getDocCount()
    ---
    +{abstract} boolean hasFreqs()
    +{abstract} boolean hasOffsets()
    +{abstract} boolean hasPositions()
    +{abstract} boolean hasPayloads()
    ---
    +BytesRef getMin()
    +BytesRef getMax()
}

abstract class TermsEnum{
    // 用来seek或者遍历每一个Term，获取Term的一些相关信息
    ---
    // 精准查询term
    +boolean seekExact(BytesRef text)
    // 查找一个term,
    +{abstract} SeekStatus seekCeil(BytesRef text)
    // 下一个Term
    +BytesRef next()
    ---
    // 当前Term的文本值
    +{abstract} BytesRef term()
    // 当前Term的序号
    +{abstract} long ord()
    // 当前Term的文档频率
    +{abstract} int docFreq()
    // 当前Term在所有文档中出现的词频
    +{abstract} long totalTermFreq()
    // 当前Term的倒排表
    +{abstract} PostingsEnum postings(PostingsEnum reuse, int flags)
}
@enduml