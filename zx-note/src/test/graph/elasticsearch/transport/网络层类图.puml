@startuml

class NetworkModule{
    上层可以通过此类获取传输模块和HTTP传输模块
    ---
    +Supplier<Transport> getTransportSupplier()
    +Supplier<HttpServerTransport> getHttpServerTransportSupplier()
    +TransportInterceptor getTransportInterceptor()
}

interface Transport{
    管理内部节点之间的连接, 负责内部节点的RPC请求
    ---
    // 绑定到了哪些地址
    +BoundTransportAddress boundAddress()
    // 节点是否已经连接
    +boolean nodeConnected(DiscoveryNode node)
    // 连接到给定的节点
    +void connectToNode(...)
    // 断开到一个节点的连接
    +void disconnectFromNode(DiscoveryNode node)
    // 返回当前建立的连接数目
    +long serverOpen()
    // 获取到一个节点的连接
    +Connection getConnection(DiscoveryNode node)
    +Connection openConnection(DiscoveryNode node, ConnectionProfile profile)
}

interface Transport.Connection{
    // 已经连接的节点列表
    #ConcurrentMap<DiscoveryNode, NodeChannels> connectedNodes
    ---
    +DiscoveryNode getNode()
    // <font color="red">向连接的节点发送请求
    +void sendRequest(......)
}

interface HttpServerTransport{
    负责对用户的REST接口服务
}

abstract class TcpTransport<Channel> implements Transport{
    --
    // <font color="red">处理其他节点发送来的RPC请求
    #String handleRequest(...)
}

class Netty4Transport implements TcpTransport{
    在Netty4插件中实现
}

class Netty4HttpServerTransport implements HttpServerTransport{
    在Netty4插件中实现。 创建一个HTTP Server监听端口
    ---
    当收到用户请求时，调用dispatchRequest对不同的请求执行相应的处理。
    void dispatchRequest(final RestRequest request, final RestChannel channel)
}

NetworkModule -- Transport
NetworkModule -- HttpServerTransport
Transport.Connection -right- Transport

@enduml