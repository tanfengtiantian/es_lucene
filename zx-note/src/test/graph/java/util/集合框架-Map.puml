@startuml
interface Map<K,V>{
    +int size()
    +boolean isEmpty()
    +boolean containsKey(Object key)
    +boolean containsValue(Object value)
    +V get(Object key)
    +V put(K key, V value)
    +V remove(Object key)
    +void putAll(Map<? extends K, ? extends V> m)
    +void clear()
    ---
    //views
    +Set<K> keySet()
    +Collection<V> values()
    +Set<Map.Entry<K, V>> entrySet()
    // Defaultable methods
    +V getOrDefault(Object key, V defaultValue)
    +void forEach(BiConsumer<? super K, ? super V> action)
    +V putIfAbsent(K key, V value)
}

class HashMap<K,V> implements Map{
    // TODO:
}

interface SortedMap<K,V> extends Map{
}

interface NavigableMap<K,V> extends SortedMap{
}



class TreeMap<K,V> implements NavigableMap{
}

@enduml